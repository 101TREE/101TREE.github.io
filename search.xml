<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java_Future类讲解</title>
    <url>/2023/10/12/22-05-16/</url>
    <content><![CDATA[<h2 id="1-Future的应用场景"><a href="#1-Future的应用场景" class="headerlink" title="1 Future的应用场景"></a>1 Future的应用场景</h2><p>​    在并发编程中，我们经常用到非阻塞的模型，在之前的多线程的三种实现中，不管是继承thread类还是实现runnable接口，都无法保证获取到之前的执行结果。通过实现Callback接口，并用Future可以来接收多线程的执行结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Future表示一个可能还没有完成的异步任务的结果，针对这个结果可以添加Callback以便在任务执行成功或失败后作出相应的操作。</span><br><span class="line"></span><br><span class="line">举个例子：比如去吃早点时，点了包子和凉菜，包子需要等3分钟，凉菜只需1分钟，如果是串行的一个执行，在吃上早点的时候需要等待4分钟，但是因为你在等包子的时候，可以同时准备凉菜，所以在准备凉菜的过程中，可以同时准备包子，这样只需要等待3分钟。那Future这种模式就是后面这种执行模式。</span><br></pre></td></tr></table></figure>

<h2 id="2-Future的类图结构"><a href="#2-Future的类图结构" class="headerlink" title="2 Future的类图结构"></a>2 Future的类图结构</h2><p>​    Future接口定义了主要的5个接口方法，有RunnableFuture和SchedualFuture继承这个接口，以及CompleteFuture和ForkJoinTask继承这个接口。</p>
<p><img src="img.png" alt="img.png"></p>
<p><strong>RunnableFuture</strong></p>
<pre><code>    这个接口同时继承Future接口和Runnable接口，在成功执行run（）方法后，可以通过Future访问执行结果。这个接口都实现类是FutureTask,一个可取消的异步计算，这个类提供了Future的基本实现，后面我们的demo也是用这个类实现，它实现了启动和取消一个计算，查询这个计算是否已完成，恢复计算结果。计算的结果只能在计算已经完成的情况下恢复。如果计算没有完成，get方法会阻塞，一旦计算完成，这个计算将不能被重启和取消，除非调用runAndReset方法。

    FutureTask能用来包装一个Callable或Runnable对象，因为它实现了Runnable接口，而且它能被传递到Executor进行执行。为了提供单例类，这个类在创建自定义的工作类时提供了protected构造函数。
</code></pre>
<p><strong>SchedualFuture</strong></p>
<pre><code>    这个接口表示一个延时的行为可以被取消。通常一个安排好的future是定时任务SchedualedExecutorService的结果
</code></pre>
<p><strong>CompleteFuture</strong></p>
<pre><code>    一个Future类是显示的完成，而且能被用作一个完成等级，通过它的完成触发支持的依赖函数和行为。当两个或多个线程要执行完成或取消操作时，只有一个能够成功。
</code></pre>
<p><strong>ForkJoinTask</strong></p>
<pre><code>    基于任务的抽象类，可以通过ForkJoinPool来执行。一个ForkJoinTask是类似于线程实体，但是相对于线程实体是轻量级的。大量的任务和子任务会被ForkJoinPool池中的真实线程挂起来，以某些使用限制为代价。
</code></pre>
<h2 id="3-Future的主要方法"><a href="#3-Future的主要方法" class="headerlink" title="3 Future的主要方法"></a>3 Future的主要方法</h2><p>Future接口主要包括5个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Future</span>&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(<span class="type">boolean</span> mayInterruptIfRunning)</span>;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isCancelled</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isDone</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    V <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    V <span class="title function_">get</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>get（）方法可以当任务结束后返回一个结果，如果调用时，工作还没有结束，则会阻塞线程，直到任务执行完毕</p>
<p>get（long timeout,TimeUnit unit）做多等待timeout的时间就会返回结果</p>
<p>cancel（boolean mayInterruptIfRunning）方法可以用来停止一个任务，如果任务可以停止（通过mayInterruptIfRunning来进行判断），则可以返回true,如果任务已经完成或者已经停止，或者这个任务无法停止，则会返回false.</p>
<p>isDone（）方法判断当前方法是否完成</p>
<p>isCancel（）方法判断当前方法是否取消</p>
<h2 id="4-Future示例demo"><a href="#4-Future示例demo" class="headerlink" title="4 Future示例demo"></a>4 Future示例demo</h2><p>需求场景：等早餐过程中，包子需要3秒，凉菜需要1秒，普通的多线程需要四秒才能完成。先等凉菜，再等包子，因为等凉菜时，普通多线程启动start()方法，执行run()中具体方法时，没有返回结果，所以如果要等有返回结果，必须是要1秒结束后才知道结果。</p>
<p>普通多线程：</p>
<p>public class BumThread extends Thread{</p>
<pre><code>@Override
public void run() &#123;
    try &#123;
        Thread.sleep(1000*3);
        System.out.println(&quot;包子准备完毕&quot;);
    &#125; catch (InterruptedException e) &#123;
        e.printStackTrace();
    &#125;
&#125;
</code></pre>
<p>}</p>
<pre><code>public class ColdDishThread extends Thread&#123;
    @Override
    public void run() &#123;
        try &#123;
            Thread.sleep(1000);
            System.out.println(&quot;凉菜准备完毕&quot;);
        &#125; catch (InterruptedException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;
&#125;



    

public static void main(String[] args) throws InterruptedException &#123;
        long start = System.currentTimeMillis();
        // 等凉菜 -- 必须要等待返回的结果，所以要调用join方法
        Thread t1 = new ColdDishThread();
        t1.start();
        t1.join();
    
        // 等包子 -- 必须要等待返回的结果，所以要调用join方法
        Thread t2 = new BumThread();
        t2.start();
        t2.join();
    
        long end = System.currentTimeMillis();
        System.out.println(&quot;准备完毕时间：&quot;+(end-start));
&#125;
</code></pre>
<p>采用Future模式：</p>
<pre><code>public static void main(String[] args) throws InterruptedException, ExecutionException &#123;
    long start = System.currentTimeMillis();
    
    // 等凉菜 
    Callable ca1 = new Callable()&#123;
 
        @Override
        public String call() throws Exception &#123;
            try &#123;
                Thread.sleep(1000);
            &#125; catch (InterruptedException e) &#123;
                e.printStackTrace();
            &#125;
            return &quot;凉菜准备完毕&quot;;
        &#125;
    &#125;;
    FutureTask&lt;String&gt; ft1 = new FutureTask&lt;String&gt;(ca1);
    new Thread(ft1).start();
    
    // 等包子 -- 必须要等待返回的结果，所以要调用join方法
    Callable ca2 = new Callable()&#123;
 
            @Override
            public Object call() throws Exception &#123;
                try &#123;
                    Thread.sleep(1000*3);
                &#125; catch (InterruptedException e) &#123;
                    e.printStackTrace();
                &#125;
                return &quot;包子准备完毕&quot;;
        &#125;
    &#125;;
    FutureTask&lt;String&gt; ft2 = new FutureTask&lt;String&gt;(ca2);
    new Thread(ft2).start();
    
    System.out.println(ft1.get());
    System.out.println(ft2.get());
    
    long end = System.currentTimeMillis();
    System.out.println(&quot;准备完毕时间：&quot;+(end-start));
&#125;
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>github-push</title>
    <url>/2023/10/11/23-46-58/</url>
    <content><![CDATA[<p>科学上网的同时，push代码到github时不时会提示失败无法连接仓库</p>
<span id="more"></span>
<p>以下操作可以在idea下的Terminal执行</p>
<h1 id="1-代理查询"><a href="#1-代理查询" class="headerlink" title="1 代理查询"></a>1 代理查询</h1><p>查看是否存在代理地址（一般都是空的）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy</span><br><span class="line">git config --global https.proxy</span><br></pre></td></tr></table></figure>
<h1 id="2-取消代理"><a href="#2-取消代理" class="headerlink" title="2 取消代理"></a>2 取消代理</h1><p>如果在第一步查询存在代理地址，但是地址不对，要先将代理进行删除，再进行后续的重新添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<h1 id="3-重新设置代理"><a href="#3-重新设置代理" class="headerlink" title="3 重新设置代理"></a>3 重新设置代理</h1><p>笔者的梯子软件用的是Clash for Windowss<br>可以看到代理端口是    7890<br><img src="img.png" alt="img.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure>
<h1 id="4-结束了"><a href="#4-结束了" class="headerlink" title="4 结束了"></a>4 结束了</h1><p>接下来就是愉快的push了</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/09/24/20-02-22/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>java并发编程</title>
    <url>/2023/10/12/21-10-00/</url>
    <content><![CDATA[<p>原文链接：<a href="http://t.csdnimg.cn/M6zz3">http://t.csdnimg.cn/M6zz3</a></p>
<span id="more"></span>

<h1 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h1><p>在Java 5之后，并发编程引入了一堆新的启动、调度和管理线程的API。<br></p>
<p>Executor框架便是Java 5中引入的，其内部使用了线程池机制，它在java.util.cocurrent 包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。<br></p>
<p>因此，在Java 5之后，通过Executor来启动线程比使用Thread的start方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，<br><strong>还有关键的一点</strong>：有助于避免this逃逸问题——如果我们在构造器中启动一个线程，因为另一个任务可能会在构造器结束之前开始执行，此时可能会访问到初始化了一半的对象用Executor在构造器中。<br></p>
<p>Eexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种标准的方法将任务的提交过程和执行过程解耦开发，基于生产者-消费者模式，其提交任务的线程相当于生产者，执行任务的线程相当于消费者，并用Runnable来表示任务，Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。</p>
<h2 id="一、Executor的UML图：（常用的几个接口和子类）"><a href="#一、Executor的UML图：（常用的几个接口和子类）" class="headerlink" title="一、Executor的UML图：（常用的几个接口和子类）"></a>一、Executor的UML图：（常用的几个接口和子类）</h2><p><img src="img.png" alt="img.png"></p>
<p>Executor框架包括：线程池，Executor，Executors，ExecutorService，CompletionService，Future，Callable等。</p>
<h2 id="二、Executor和ExecutorService"><a href="#二、Executor和ExecutorService" class="headerlink" title="二、Executor和ExecutorService"></a>二、Executor和ExecutorService</h2><p>Executor：一个接口，其定义了一个接收Runnable对象的方法executor，其方法签名为executor(Runnable command),该方法接收一个Runable实例，它用来执行一个任务，任务即一个实现了Runnable接口的类，一般来说，Runnable任务开辟在新线程中的使用方法为：new Thread(new RunnableTask())).start()，但在Executor中，可以使用Executor而不用显示地创建线程：executor.execute(new RunnableTask()); &#x2F;&#x2F; 异步执行</p>
<p>ExecutorService：是一个比Executor使用更广泛的子类接口，其提供了生命周期管理的方法，返回 Future 对象，以及可跟踪一个或多个异步任务执行状况返回Future的方法；可以调用ExecutorService的shutdown（）方法来平滑地关闭 ExecutorService，调用该方法后，将导致ExecutorService停止接受任何新的任务且等待已经提交的任务执行完成(已经提交的任务会分两类：一类是已经在执行的，另一类是还没有开始执行的)，当所有已经提交的任务执行完毕后将会关闭ExecutorService。因此我们一般用该接口来实现和管理多线程。</p>
<p>通过 ExecutorService.submit() 方法返回的 Future 对象，可以调用isDone（）方法查询Future是否已经完成。当任务完成时，它具有一个结果，你可以调用get()方法来获取该结果。你也可以不用isDone（）进行检查就直接调用get()获取结果，在这种情况下，get()将阻塞，直至结果准备就绪，还可以取消任务的执行。Future 提供了 cancel() 方法用来取消执行 pending 中的任务。ExecutorService 部分代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface ExecutorService extends Executor &#123;</span><br><span class="line">	void shutdown();</span><br><span class="line">	&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</span><br><span class="line">	&lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</span><br><span class="line">	&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit) throws InterruptedException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、Executors类：-主要用于提供线程池相关的操作"><a href="#三、Executors类：-主要用于提供线程池相关的操作" class="headerlink" title="三、Executors类： 主要用于提供线程池相关的操作"></a>三、Executors类： 主要用于提供线程池相关的操作</h2><p>Executors类，提供了一系列工厂方法用于创建线程池，返回的线程池都实现了ExecutorService接口。</p>
<p>1、public static ExecutorService newFiexedThreadPool(int Threads) 创建固定数目线程的线程池。</p>
<p>2、public static ExecutorService newCachedThreadPool()：创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果没有可用的线程，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</p>
<p>3、public static ExecutorService newSingleThreadExecutor()：创建一个单线程化的Executor。</p>
<p>4、public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)</p>
<p>创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>newCachedThreadPool()</td>
<td>-缓存型池子，先查看池中有没有以前建立的线程，如果有，就 reuse.如果没有，就建一个新的线程加入池中<br>-缓存型池子通常用于执行一些生存期很短的异步型任务<br> 因此在一些面向连接的daemon型SERVER中用得不多。但对于生存期短的异步任务，它是Executor的首选。<br>-能reuse的线程，必须是timeout IDLE内的池中线程，缺省     timeout是60s,超过这个IDLE时长，线程实例将被终止及移出池。<br>  注意，放入CachedThreadPool的线程不必担心其结束，超过TIMEOUT不活动，其会自动被终止。</td>
</tr>
<tr>
<td>newFixedThreadPool(int)</td>
<td>-newFixedThreadPool与cacheThreadPool差不多，也是能reuse就用，但不能随时建新的线程<br>-其独特之处:任意时间点，最多只能有固定数目的活动线程存在，此时如果有新的线程要建立，只能放在另外的队列中等待，直到当前的线程中某个线程终止直接被移出池子<br>-和cacheThreadPool不同，FixedThreadPool没有IDLE机制（可能也有，但既然文档没提，肯定非常长，类似依赖上层的TCP或UDP IDLE机制之类的），所以FixedThreadPool多数针对一些很稳定很固定的正规并发线程，多用于服务器<br>-从方法的源代码看，cache池和fixed 池调用的是同一个底层 池，只不过参数不同:<br>fixed池线程数固定，并且是0秒IDLE（无IDLE）    <br>cache池线程数支持0-Integer.MAX_VALUE(显然完全没考虑主机的资源承受能力），60秒IDLE</td>
</tr>
<tr>
<td>newScheduledThreadPool(int)</td>
<td>-调度型线程池<br>-这个池子里的线程可以按schedule依次delay执行，或周期执行</td>
</tr>
<tr>
<td>SingleThreadExecutor()</td>
<td>-单例线程，任意时间池中只能有一个线程<br>-用的是和cache池和fixed池相同的底层池，但线程数目是1-1,0秒IDLE（无IDLE）</td>
</tr>
</tbody></table>
<h2 id="四、Executor-VS-ExecutorService-VS-Executors"><a href="#四、Executor-VS-ExecutorService-VS-Executors" class="headerlink" title="四、Executor VS  ExecutorService VS Executors"></a>四、Executor VS  ExecutorService VS Executors</h2><p>正如上面所说，这三者均是 Executor 框架中的一部分。Java 开发者很有必要学习和理解他们，以便更高效的使用 Java 提供的不同类型的线程池。总结一下这三者间的区别，以便大家更好的理解：</p>
<ul>
<li>Executor 和 ExecutorService 这两个接口主要的区别是：ExecutorService 接口继承了 Executor 接口，是 Executor 的子接口</li>
<li>Executor 和 ExecutorService 第二个区别是：Executor 接口定义了 execute()方法用来接收一个Runnable接口的对象，而 ExecutorService 接口中的 submit()方法可以接受Runnable和Callable接口的对象。</li>
<li>Executor 和 ExecutorService 接口第三个区别是 Executor 中的 execute() 方法不返回任何结果，而 ExecutorService 中的 submit()方法可以通过一个 Future 对象返回运算结果。</li>
<li>Executor 和 ExecutorService 接口第四个区别是除了允许客户端提交一个任务，ExecutorService 还提供用来控制线程池的方法。比如：调用 shutDown() 方法终止线程池。可以通过 《Java Concurrency in Practice》 一书了解更多关于关闭线程池和如何处理 pending 的任务的知识。</li>
<li>Executors 类提供工厂方法用来创建不同类型的线程池。比如: newSingleThreadExecutor() 创建一个只有一个线程的线程池，newFixedThreadPool(int numOfThreads)来创建固定线程数的线程池，newCachedThreadPool()可以根据需要创建新的线程，但如果已有线程是空闲的会重用已有线程。<br>下面给出一个Executor执行Callable任务的示例代码：</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    import java.util.ArrayList;   </span><br><span class="line">    import java.util.List;   </span><br><span class="line">    import java.util.concurrent.*;   </span><br><span class="line">    </span><br><span class="line">    public class CallableDemo&#123;   </span><br><span class="line">        public static void main(String[] args)&#123;   </span><br><span class="line">            ExecutorService executorService = Executors.newCachedThreadPool();   </span><br><span class="line">            List&lt;Future&lt;String&gt;&gt; resultList = new ArrayList&lt;Future&lt;String&gt;&gt;();   </span><br><span class="line">       //创建10个任务并执行   </span><br><span class="line">        for (int i = 0; i &lt; 10; i++)&#123;   </span><br><span class="line">            //使用ExecutorService执行Callable类型的任务，并将结果保存在future变量中   </span><br><span class="line">            Future&lt;String&gt; future = executorService.submit(new TaskWithResult(i));   </span><br><span class="line">            //将任务执行结果存储到List中   </span><br><span class="line">            resultList.add(future);   </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">      </span><br><span class="line">        //遍历任务的结果   </span><br><span class="line">        for (Future&lt;String&gt; fs : resultList)&#123;   </span><br><span class="line">                try&#123;   </span><br><span class="line">                    while(!fs.isDone);//Future返回如果没有完成，则一直循环等待，直到Future返回完成  </span><br><span class="line">                    System.out.println(fs.get());     //打印各个线程（任务）执行的结果   </span><br><span class="line">                &#125;catch(InterruptedException e)&#123;   </span><br><span class="line">                    e.printStackTrace();   </span><br><span class="line">                &#125;catch(ExecutionException e)&#123;   </span><br><span class="line">                    e.printStackTrace();   </span><br><span class="line">                &#125;finally&#123;   </span><br><span class="line">                    //启动一次顺序关闭，执行以前提交的任务，但不接受新任务  </span><br><span class="line">                    executorService.shutdown();   </span><br><span class="line">                &#125;   </span><br><span class="line">        	&#125;   </span><br><span class="line">    	&#125;   </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    class TaskWithResult implements Callable&lt;String&gt;&#123;   </span><br><span class="line">        private int id;   </span><br><span class="line">    public TaskWithResult(int id)&#123;   </span><br><span class="line">        this.id = id;   </span><br><span class="line">    	&#125;   </span><br><span class="line">      </span><br><span class="line">    	/**  </span><br><span class="line">     	* 任务的具体过程，一旦任务传给ExecutorService的submit方法， </span><br><span class="line">     	* 则该方法自动在一个线程上执行 </span><br><span class="line">     	*/   </span><br><span class="line">    	public String call() throws Exception &#123;  </span><br><span class="line">       	 System.out.println(&quot;call()方法被自动调用！！！    &quot; + 			Thread.currentThread().getName());   </span><br><span class="line">       	 //该返回结果将被Future的get方法得到  </span><br><span class="line">       	 return &quot;call()方法被自动调用，任务返回的结果是：&quot; + id + &quot;    &quot; + 		Thread.currentThread().getName();   </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h2 id="五、自定义线程池"><a href="#五、自定义线程池" class="headerlink" title="五、自定义线程池"></a>五、自定义线程池</h2><p>自定义线程池，可以用ThreadPool Executor类创建，它有多个构造方法来创建线程池，用该类很容易实现自定义的线程池，这里先贴上示例程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;   </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;   </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;   </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolTest</span>&#123;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;   </span><br><span class="line">        <span class="comment">//创建等待队列   </span></span><br><span class="line">        BlockingQueue&lt;Runnable&gt; bqueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(<span class="number">20</span>);   </span><br><span class="line">        <span class="comment">//创建线程池，池中保存的线程数为3，允许的最大线程数为5  </span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">3</span>,<span class="number">5</span>,<span class="number">50</span>,TimeUnit.MILLISECONDS,bqueue);   </span><br><span class="line">        <span class="comment">//创建七个任务   </span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();   </span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();   </span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();   </span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();   </span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">t5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();   </span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">t6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();   </span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">t7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();   </span><br><span class="line">        <span class="comment">//每个任务会在一个线程上执行  </span></span><br><span class="line">        pool.execute(t1);   </span><br><span class="line">        pool.execute(t2);   </span><br><span class="line">        pool.execute(t3);   </span><br><span class="line">        pool.execute(t4);   </span><br><span class="line">        pool.execute(t5);   </span><br><span class="line">        pool.execute(t6);   </span><br><span class="line">        pool.execute(t7);   </span><br><span class="line">        <span class="comment">//关闭线程池   </span></span><br><span class="line">        pool.shutdown();   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;   </span><br><span class="line">    <span class="meta">@Override</span>   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;   </span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在执行。。。&quot;</span>);   </span><br><span class="line">        <span class="keyword">try</span>&#123;   </span><br><span class="line">            Thread.sleep(<span class="number">100</span>);   </span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;   </span><br><span class="line">            e.printStackTrace();   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>运行结果如下：<br><br><img src="img_1.png" alt="img_1.png"></p>
<p>从结果中可以看出，七个任务是在线程池的三个线程上执行的。这里简要说明下用到的ThreadPoolExecuror类的构造方法中各个参数的含义。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span> <span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit,BlockingQueue&lt;Runnable&gt; workQueue)</span></span><br></pre></td></tr></table></figure>



<p>corePoolSize：线程池中所保存的核心线程数，包括空闲线程。</p>
<p>maximumPoolSize：池中允许的最大线程数。</p>
<p>keepAliveTime：线程池中的空闲线程所能持续的最长时间。</p>
<p>unit：持续时间的单位。</p>
<p>workQueue：任务执行前保存任务的队列，仅保存由execute方法提交的Runnable任务。</p>
<p>根据ThreadPoolExecutor源码前面大段的注释，我们可以看出，当试图通过excute方法将一个Runnable任务添加到线程池中时，按照如下顺序来处理：<br>1、如果线程池中的线程数量少于corePoolSize，即使线程池中有空闲线程，也会创建一个新的线程来执行新添加的任务；<br>2、如果线程池中的线程数量大于等于corePoolSize，但缓冲队列workQueue未满，则将新添加的任务放到workQueue中，按照FIFO的原则依次等待执行（线程池中有线程空闲出来后依次将缓冲队列中的任务交付给空闲的线程执行）；</p>
<p>3、如果线程池中的线程数量大于等于corePoolSize，且缓冲队列workQueue已满，但线程池中的线程数量小于maximumPoolSize，则会创建新的线程来处理被添加的任务；</p>
<p>4、如果线程池中的线程数量等于了maximumPoolSize，有4种处理方式（该构造方法调用了含有5个参数的构造方法，并将最后一个构造方法为RejectedExecutionHandler类型，它在处理线程溢出时有4种方式，这里不再细说，要了解的，自己可以阅读下源码）。</p>
<pre><code>总结起来，也即是说，当有新的任务要处理时，先看线程池中的线程数量是否大于corePoolSize，再看缓冲队列workQueue是否满，最后看线程池中的线程数量是否大于maximumPoolSize。

另外，当线程池中的线程数量大于corePoolSize时，如果里面有线程的空闲时间超过了keepAliveTime，就将其移除线程池，这样，可以动态地调整线程池中线程的数量。
</code></pre>
<p>我们大致来看下Executors的源码，newCachedThreadPool的不带RejectedExecutionHandler参数（即第五个参数，线程数量超过maximumPoolSize时，指定处理方式）的构造方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,  </span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,  </span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它将corePoolSize设定为0，而将maximumPoolSize设定为了Integer的最大值，线程空闲超过60秒，将会从线程池中移除。<br><br>由于核心线程数为0，因此每次添加任务，都会先从线程池中找空闲线程，如果没有就会创建一个线程（SynchronousQueue<Runnalbe>决定的，后面会说）来执行新的任务，并将该线程加入到线程池中，而最大允许的线程数为 Integer的最大值 ，因此这个线程池理论上可以不断扩大。<br><br>再来看newFixedThreadPool的不带RejectedExecutionHandler参数的构造方法，如下：</Runnalbe></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,  </span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,  </span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>它将 corePoolSize和maximumPoolSize都设定为了nThreads，这样便实现了线程池的大小的固定，不会动态地扩大，另外，keepAliveTime设定为了0，也就是说线程只要空闲下来，就会被移除线程池，敢于LinkedBlockingQueue下面会说。<br>下面说说几种排队的策略：</p>
<pre><code>1、直接提交。缓冲队列采用 SynchronousQueue，它将任务直接交给线程处理而不保持它们。如果不存在可用于立即运行任务的线程（即线程池中的线程都在工作），则试图把任务加入缓冲队列将会失败，因此会构造一个新的线程来处理新添加的任务，并将其加入到线程池中。直接提交通常要求无界 maximumPoolSizes（Integer.MAX_VALUE） 以避免拒绝新提交的任务。newCachedThreadPool采用的便是这种策略。

2、无界队列。使用无界队列（典型的便是采用预定义容量的 LinkedBlockingQueue，理论上是该缓冲队列可以对无限多的任务排队）将导致在所有 corePoolSize 线程都工作的情况下将新任务加入到缓冲队列中。这样，创建的线程就不会超过 corePoolSize，也因此，maximumPoolSize 的值也就无效了。当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列。newFixedThreadPool采用的便是这种策略。

3、有界队列。当使用有限的 maximumPoolSizes 时，有界队列（一般缓冲队列使用ArrayBlockingQueue，并制定队列的最大长度）有助于防止资源耗尽，但是可能较难调整和控制，队列大小和最大池大小需要相互折衷，需要设定合理的参数。
</code></pre>
<h2 id="六、比较Executor和new-Thread"><a href="#六、比较Executor和new-Thread" class="headerlink" title="六、比较Executor和new Thread()"></a>六、比较Executor和new Thread()</h2><p>new Thread的弊端如下：</p>
<p>a. 每次new Thread新建对象性能差。<br>b. 线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。<br>c. 缺乏更多功能，如定时执行、定期执行、线程中断。<br>相比new Thread，Java提供的四种线程池的好处在于：<br>a. 重用存在的线程，减少对象创建、消亡的开销，性能佳。<br>b. 可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。<br>c. 提供定时执行、定期执行、单线程、并发数控制等功能。</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
